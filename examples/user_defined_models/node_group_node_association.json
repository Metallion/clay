{
	"type_name": "NodeGroupNodeAssociation",
	"resource_name": "node_group_node_associations",
	"to_be_migrated": true,
	"is_controller_enabled": true,
	"is_many_to_many_association": true,
	"fields": [
		{
			"name": "NodeGroupID",
			"tag":  "json:\"node_group_id\" gorm:\"not null;unique_index:node_group_id_node_id\" sql:\"type:integer references node_groups(id)\" clay:\"many_to_many_left_resource_name=node_groups\"",
			"type_name": "int"
		},
		{
			"name": "NodeGroup",
			"tag":  "json:\"node_group\"",
			"type_name": "NodeGroup"
		},
		{
			"name": "NodeID",
			"tag":  "json:\"node_id\" gorm:\"not null;unique_index:node_group_id_node_id\" sql:\"type:integer references nodes(id)\" clay:\"many_to_many_right_resource_name=nodes\"",
			"type_name": "int"
		},
		{
			"name": "Node",
			"tag":  "json:\"node\"",
			"type_name": "Node"
		}
	],
	"sql_after_migration": "create trigger if not exists DeleteNodeGroupNodeAssociationBeforeNodeGroupDeletion before delete on node_groups begin delete from node_group_node_associations where node_group_id = old.id; end; create trigger if not exists DeleteNodeGroupNodeAssociationBeforeNodeDeletion before delete on nodes begin delete from node_group_node_associations where node_id = old.id; end;"
}
